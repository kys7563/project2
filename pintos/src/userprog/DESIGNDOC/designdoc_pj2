		OJECT 2: USER PROGRAMS |
             |     DESIGN DOCUMENT      |
             +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.
Yongsik Kim <kys7563@kaist.ac.kr>
Seunggon Park <psg9707@kaist.ac.kr>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

We wrote our code based on both Korean and English versions of pintos project slide set at oslab.kaist.ac.kr.

We have a problem regarding signal handler address.


>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

               ARGUMENT PASSING
               ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Nothing new is added.


---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

Firstly, we copied the name of the file by strcpy. Then, by using strtok, we parsed arguments into tokens. 
We changed the argument of load in start_process from the whole file name to the first token of the file name.
Then, we stacked them according to 80x86 convention, which stacks arguments(including alignment bytes), arguments' address, argc, argv, and fake address in order.

We didn't implement a mechanism for avoiding overflow, but we guess we can implement it by using canary, which is located right after the stack page, enabling detection of overflow when its value is changed. 
  


---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

_r versions of functions are called reentrant functions in c. 
Reentrant funcitons mean we can call them from multiple threads simultaneously.
Non reentrant functions, strtok(), use global state, which can be attacked by multiple processes.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

1. Efficient: When using unix approach, we do not have to go inside the kernel
2. Extensibility, flexibility: By using pipeline and redirection, we can build a large program by combining small files.
                 SYSTEM CALLS
                 ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
In thread.h struct thread,

    struct list sibling; //for storing child processes
    struct list_elem child; //for accessing each child process
    bool load_process; //indicating whether process is loaded or not 
    bool exit_process; //indicating whether process is exited or not
    
    by sema_down or sema_up, we can make a process to become blocked(sema_down), or rescheduled(sema_up).
    struct semaphore load_semaphore; 
    struct semaphore exit_semaphore; 
    
    int exit_status; //indicating exit status of a process

    
    struct file *running_file;  //indicating currently running file
    struct file *fd[64]; //file descriptor table (total number of 64), array of struct file pointers
   
    void (*handler[64])(void); //for signal handler, signal handler table, array of function pointers
    int next_fd; //indicating which file descriptor will be filled

are added.

In syscall.c, filesys_lock is added as a global variable for synchronization purpose.



>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

In struct thread, there is a member called 'next_fd' for storing next file descriptor to fill in.
When opening a new file, the process store the address of the file in (next_fd)th file descriptor entry.
File descriptors are unique within a single process. 

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

Firstly, we check arguments if their addresses are valid or not.
Then, by read, write system calls, 
we can read user data from the stdin(when the file descriptor is 0) or by using input_getc()
or write user data from the stdout(when the file descriptor is 1) or by using putbuf().


>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

When a system call causes a full page data copying, the greatest possible number of inspections would be 4096, because the program will inspect every byte.
The least number of calls is 2, because 4096 is 4KB, and we can inspect 2 pages (each 2KB in size) and see whether the data is aligned or in valid address space.

2 bytes of data case: max : 2, min:1, whether each byte is at different pages(2) or at the same page(1).

I don't think there's a room for improvement (less than 1 is impossible.)

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

We call process_wait() when wait system call arrives.
process_wait() does following:
Program finds a child process with given child_tid.
Because the child process borns with exit_semaphore value 0, the parent process waits for child_process by calling sema_down().
When child process exits, child process calls sema_up its exit_sempahore value at thread_exit().
Then, child process's exit status is returned when the child process exits. Finally, child process is removed from child list.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

We implemented check_address() in syscall.c, which checks the validity of addresses. 
If invalid arguments come in the stack, it calls exit(-1), which call process_exit().
In process_exit(), the program frees the current process's resources by calling pagedir_destroy and closing all files in the file descriptor table.


---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

We added sema_load in the struct thread, which is initialized at 0.
In start_process(), we call sema_up(&(thread_current()->sema_load)), ensuring load is completed.
We also added load_process in the struct thread, which stores the bool value whether load is successful. 


>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

Synchronization is ensured by using lock.
When P calls wait(C) before C exits -> P acquires lock, and C is not exited yet so P waits for C.
When P calls wait(C) after C exits -> P acuires lock, C is terminated, than read the exit status of C.
When P terminates without wating, before C exits -> P acquires lock, when P terminates, it removes all child processes by making them null. 
Because freeing null pointer is not a problem, when freeing C when child is exiting, it doesn't make a problem.
When P calls terminates after C exits -> when C exits, it frees the allocated memory, and P frees its memory when terminates, so the resources are freed.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

We thought we need a validity check for address, so we implemented it, and we think our implementation is simple.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

In struct thread, we declared file descriptors as an array of pointers to struct file. Also, we declared next_fd, indicating next file descriptor to fill in.
By updating next_fd every time when file is opened or closed, we can easily know the status of file descriptor table.
However, we need to keep track of every next_fd value and calculate it.
	

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

We didn't change it.


               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?

